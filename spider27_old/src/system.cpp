/*******************************************************************************
Programming - Alexander Klimenko
Project - MetroNET
Started at 27.12.00
Last updated at 03.01.01
Copyright (C) 2000, 2001 SCAD Ltd. (software development group)
*******************************************************************************/

#include <photon/PxProto.h>
#include <sys/slog.h>
#include <sys/slogcodes.h>
#include "global.h"
#include "system.h"

byte g_CRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
};

byte g_CRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
};


void error_msg(char* file_name, int line, const char* msg)
{
    if (!msg)
		printf("Error in %s at line %d: %s\n", file_name, line, strerror(errno));
    else
		printf("Error in %s at line %d: %s\n", file_name, line, msg);
}

long file_size(FILE *fp)
{
	long int save_pos;
	long size_of_file;
	
	save_pos = ftell(fp);
	
	fseek(fp, 0L, SEEK_END);
	
	size_of_file = ftell(fp);

	fseek(fp, save_pos, SEEK_SET);
	
	return size_of_file;
}

int extract_string(const char* src, char* dst, char first, char last)
{
	char *first_char, *last_char;
	int size;
	
	first_char = strchr((char*)src, first);
	if (!first_char)
		return 0;
	last_char = strrchr((char*)src, last);
	if (!last_char)
		return 0;
	size = last_char - first_char - 1;
	memcpy(dst, first_char + 1, size);
	dst[size] = '\0';	
	
	return 1;
}
	
int translate_string(const char* src, char* dst, struct PxTransCtrl* trans_set)
{	
    char *translated;
    int src_len, dst_len, taken, made;
    
    src_len = strlen(src);
    if (src != NULL &&
	(translated = (char*)malloc((src_len + 1) * MB_LEN_MAX)) != NULL)
    {
	if ((dst_len = PxTranslateToUTF(trans_set, src, src_len + 1, &taken,
					translated, (src_len + 1) * MB_LEN_MAX,
					&made)) != -1)
	{
	    strcpy(dst, translated);
	    free(translated);
	    return 1;
	}
	else
	{
	    free(translated);
	    return 0;
	}
    }
    else
      return 0;
}

unsigned long get_widget_scalar(PtWidget_t *widget, long type)
{
	PtArg_t arg;
	PtSetArg(&arg, type, 0, 0);
	PtGetResources(widget, 1, &arg);
	return arg.value;
}

void SysMessage(int type, const char* message, ...)
{
	va_list	arg;
	va_start(arg, message);
	char	buffer[256] = { 0 };
	
	switch(type)
	{
		case ERROR_MSG:
			strcat(buffer, "ERROR: ");
			strcat(buffer, message);
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_ERROR, buffer, arg);
			break;
		case INFO_MSG:
			strcat(buffer, "INFO: ");
			strcat(buffer, message);
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_INFO, buffer, arg);
      		break;
		case DEBUG_MSG:
			strcat(buffer, "DEBUG: ");
			strcat(buffer, message);			
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_DEBUG1, buffer, arg);
      		break;
	}
}

word CRC(const byte* buffer, int size)
{
	byte highCRC = 0xFF;
	byte lowCRC = 0xFF;
	word	index;
	
	while (size--)
	{
		index = highCRC ^ *buffer++;
		highCRC = lowCRC ^ g_CRCHi[index];
		lowCRC = g_CRCLo[index];
	}

	return (highCRC << 8 | lowCRC);
}

int SaveDirections(const char* fileName)
{
	FILE*		handle;
	dword	id;
	int			direction;	

	handle = fopen(fileName, "wb");
	if (!handle)
		return 0;
	
	if (!g_escalatorNum)
		return 0;
			
	fwrite(&g_escalatorNum, sizeof(g_escalatorNum), 1,  handle);
	
	for(int i=0; i<g_escalatorNum; i++)
	{
		fwrite(&dword(i), sizeof(i), 1,  handle);
		direction = g_escalators[i].prefDirection;
		fwrite(&direction, sizeof(direction), 1, handle);
	}
	
	fclose(handle);
	
	return 1;
}

int LoadDirections(const char* fileName)
{
	FILE*		handle;
	int			id, count = -1;
	int			direction;	
	size_t	size;
	
	handle = fopen(fileName, "rb");
	if (!handle)
		return 0;
		
	size = fread(&count, sizeof(count), 1,  handle);
	
	if (!size || (count != g_escalatorNum))
		return 0;	
	
	for(int i=0; i<count; i++)
	{
		size = fread(&id, sizeof(id), 1,  handle);
		
		if (!size)
			return 0;

		size = fread(&direction, sizeof(direction), 1, handle);
			
		if (!size)
			return 0;
		g_escalators[i].SetParam(DIR_PARAM, direction);
	}
	
	fclose(handle);
	
	return 1;
}

