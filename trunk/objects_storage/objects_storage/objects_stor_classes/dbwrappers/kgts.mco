declare database  kgtsdb;

#define int1      signed<1>
#define int2      signed<2>
#define int4      signed<4>
#define uint4     unsigned<4>
#define uint2     unsigned<2>
#define uint1     unsigned<1>


class UPO {
	
	uint1   id_upo;   //id записи
	uint1   number; //номер УПО
	uint1   exist;     //признак наличия связи с УПО

	tree < id_upo >  by_id_upo;
	hash < number > by_number_hash[10];
	hash < id_upo >  by_id_upo_hash[10];
};

class IE1 {
	
	uint1   id_ie1;        // id записи
	uint1   id_upo;       // id записи УПО
	uint1   number;     // номер ТЭЗа
	uint1   exist;          // признак наличия связи

	uint1 ram;              // отказ RAM
	uint1 dsp_fifo;        // отказ сигнального процессора и FIFO  
	uint1 cmatr;           // отказ коммутационной матрицы  
     uint1 altera;           // отказ альтеры   
     uint1 liu_framers;   // отказ LIU и FRAMERs

     unique tree< id_upo, number > by_id_upo_number;
	tree < number  >         by_number;
	tree < id_upo >         by_id_upo;
	hash < id_ie1 >         by_id_ie1[100];
};

class E1 {
	
	uint2   id_e1;      // id записи
	uint1   id_ie1;     // id записи ИЕ1
	uint1   number;  // номер потока в ТЭЗе
     uint1   ss7;          // работа по ОКСу
	uint1 hdb3;         // тип синхронизации  
	uint1 avrscs;      // авария сверхцикловой синхронизации
	uint1 avrcs;        // авария цикловой синхронизации  
	uint1 sia;            // СИА (сигнал индикации аварии)
	uint1 sia16;        // СИА по 16 КИ
	uint1 avrre;          // авария на дальнем конце
	uint1 offscsre;     // отсутствие сверхцикловой на дальнем конце
	uint1 hierror;       // повышенный коеффициент ошибок
	uint1 slip;            // проскальзывание

     unique  tree< id_ie1, number > by_id_ie1_number; 
     tree< number > by_number; 
     tree < id_ie1 >         by_id_ie1;
	hash < id_e1 >          by_id_e1[1000];
};

class CHANNEL_B	 {
	
	uint4   id_channel_b;  // id записи Е1
	uint2   id_e1;   
     uint1 nki;                      // номер канального интервала
     uint2 userid;                // идентификатор подсистемы занявшей канал
     uint2 tid;                       // идентификатор потока
	uint1 block; 

     event< tid update> channel_b_tid_update;
     unique  tree < id_e1, nki > by_id_ie1_nki;
     unique  tree < id_channel_b, tid >  by_id_channel_b_tid;
     tree < id_e1 >  by_id_e1;									
	hash < id_channel_b >  by_id_channel_b_hash[33000];
};


class CH_B_TRUNK_GR {

	uint1   id_trunk_gr;
	uint4 id_channel_b;
	event< id_channel_b update >          set_id_trunk_gr;
	tree < id_trunk_gr, id_channel_b >  by_id_trunk_gr_id_channel_b;
	hash < id_channel_b >  by_id_channel_b[33000];
	
};

class CHANNEL_D {
     uint4  id_channel_d;              // id записи
 	uint2  id_e1;                             // id записи Е1
	uint4  max_call_pointer;        // максимальное значение указателя вызова
	uint4  last_call_pointer;         
	vector<uint1> call_pointers;
	tree < id_channel_d>  by_id_channel_d;
	tree < id_e1>  by_id_e1;
	hash < id_channel_d >  by_channel_d_hash[33000];  
};

class CH_B_D {
  uint4 id_channel_b;        // id канала Б
  uint4 id_channel_d;        // id канала Д
  uint2 numb_b;        // Номер канала Б
  
  tree < id_channel_d>  by_id_chanel_d;
  tree < id_channel_b>  by_id_chanel_b;
  unique tree < id_channel_b, numb_b>  by_id_chanel_b_numb_b;
  unique tree < id_channel_d, numb_b>  by_id_chanel_d_numb_b;
};

class  DESTINATION  {
  uint4 id_destination;                // id записи
  char<20>  name;        // название
  hash<id_destination> by_id_destination_hash[ 10 ];
  tree<id_destination> by_id_destination;
};

class DIRECTION {
  uint4  id_direction;        // id записи
  char<20>  name;        // название
  uint1  to_amts;      // направление к АМТС
  uint1 lpr;          // last-party release (двусторонний отбой)
  hash<id_direction> by_id_direction_hash[ 10 ];
};

class DIRECTION_DESTINATION {
  uint4 id_direction;        // id направления
  uint4  id_destination;        // id назначения
  uint4  points;        // количество пунктов прохождения
  tree<id_direction> by_id_direction;
  tree<id_destination> by_id_destination;
  tree<id_direction, id_destination> by_id_direction_and_id_destination;
};



class TRUNK_GROUP {
  uint1 id_trunk_group;        // id записи
  uint4  id_direction;        // id направления
  uint1  inout;         // 1 - input, 2 - output, 3 - bidirect
  uint1 slzsl;         // 1 - sl, 2 - zsl(slm), 3 - universal
  uint1  isdn;         // признак ISDN
  uint1  overuse;      // транк-группа перегружена
  uint4  id_region_set; // идентификатор записи свойств сигнализации местной связи
  uint4  id_extern_set; // идентификатор записи свойств сигнализации МГ связи
  double cng_hi_limit;// верхний гистерезис перегрузки
  double  cng_low_limit; // нижний гистерезис перегрузки
  uint4 b_total;              // общее количество каналов
  uint4  b_used;           // количество занятых каналов
  uint4 last_occupied_channel_b; // id последнего занятого канала b
  uint4 max_channel_b_id; // Mаксимально возможный иденификатор канала  B для данной группы
  uint4 first_channel_b_id; // id первого канала транкгруппы
  hash <id_trunk_group> by_id_trunk_group_hash[ 10 ];
  tree <id_trunk_group> by_id_trunk_group;
  tree <id_direction> by_direction;
};
