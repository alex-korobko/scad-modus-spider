/* Generated by eXtremeDB Schema Compiler, build 279
 * at Thu May 12 19:44:43 2005
 */

#ifndef __MCO__kgtsdb__H__
#define __MCO__kgtsdb__H__

#ifdef __cplusplus
extern "C" { 
#endif

#include "mco.h"
#include "mcowrap.h"

#define MCO_COMP_VER_MAJOR 2
#define MCO_COMP_VER_MINOR 3
#define MCO_COMP_BUILD_NUM 279


#ifndef MCO_TARGET_INLINE 
#define MCO_TARGET_INLINE  __inline
#endif


/*---------------------------------------------------------------------*/
/* Handles and Class Codes                                             */

typedef struct CHANNEL_B_            { MCO_Hf h; }  CHANNEL_B;
#define                                             CHANNEL_B_code             1
typedef struct CHANNEL_D_            { MCO_Hf h; }  CHANNEL_D;
#define                                             CHANNEL_D_code             2
typedef struct CH_B_D_               { MCO_Hf h; }  CH_B_D;
#define                                             CH_B_D_code                3
typedef struct CH_B_TRUNK_GR_        { MCO_Hf h; }  CH_B_TRUNK_GR;
#define                                             CH_B_TRUNK_GR_code         4
typedef struct DESTINATION_          { MCO_Hf h; }  DESTINATION;
#define                                             DESTINATION_code           5
typedef struct DIRECTION_            { MCO_Hf h; }  DIRECTION;
#define                                             DIRECTION_code             6
typedef struct DIRECTION_DESTINATION_{ MCO_Hf h; }  DIRECTION_DESTINATION;
#define                                             DIRECTION_DESTINATION_code 7
typedef struct E1_                   { MCO_Hf h; }  E1;
#define                                             E1_code                    8
typedef struct IE1_                  { MCO_Hf h; }  IE1;
#define                                             IE1_code                   9
typedef struct TRUNK_GROUP_          { MCO_Hf h; }  TRUNK_GROUP;
#define                                             TRUNK_GROUP_code           10
typedef struct UPO_                  { MCO_Hf h; }  UPO;
#define                                             UPO_code                   11



/*---------------------------------------------------------------------*/
/* Dictionary                                                          */

mco_dictionary_h kgtsdb_get_dictionary(void);


/*---------------------------------------------------------------------*/
/* class CHANNEL_B methods                                             */

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_new                                             ( mco_trans_h t, /*OUT*/ CHANNEL_B *handle )
{ return mco_w_new_obj_noid( t, 12, 1, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_delete                                          ( CHANNEL_B *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_checkpoint                                      ( CHANNEL_B *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_id_channel_b_get                                ( CHANNEL_B *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_id_channel_b_put                                ( CHANNEL_B *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_id_e1_get                                       ( CHANNEL_B *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_id_e1_put                                       ( CHANNEL_B *handle, uint2 value )
{ return mco_w_b2_put( (mco_objhandle_h) handle, 4, 1, *(uint2*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_nki_get                                         ( CHANNEL_B *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 11, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_nki_put                                         ( CHANNEL_B *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 11, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_userid_get                                      ( CHANNEL_B *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get( (mco_objhandle_h) handle, 6, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_userid_put                                      ( CHANNEL_B *handle, uint2 value )
{ return mco_w_b2_put( (mco_objhandle_h) handle, 6, 0, *(uint2*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_tid_get                                         ( CHANNEL_B *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_tid_put                                         ( CHANNEL_B *handle, uint2 value )
{ return mco_w_b2_put_ev( (mco_objhandle_h) handle, 8, 1, *(uint2*)& value, 0);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_block_get                                       ( CHANNEL_B *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 10, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_block_put                                       ( CHANNEL_B *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 10, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_from_cursor                                     ( mco_trans_h t, mco_cursor_h c, /*OUT*/ CHANNEL_B *handle )
{ return mco_w_obj_from_cursor( t, c, 1, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_ie1_nki_index_cursor                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 0, c );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_ie1_nki_search                            ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint2 id_e1, uint1 nki )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = nki; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_ie1_nki_compare                           ( mco_trans_h t, mco_cursor_h c, uint2 id_e1, uint1 nki, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = nki; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_ie1_nki_locate                            ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CHANNEL_B * handle)
{ return mco_w_cursor_locate( t, 0, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_ie1_nki_find                              ( mco_trans_h t, uint2 id_e1, uint1 nki, /*OUT*/ CHANNEL_B *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = nki; 
  return mco_w_tree_find_scalar(t, 0, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_tid_index_cursor                ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 1, c );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_tid_search                      ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_b, uint2 tid )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = tid; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_tid_compare                     ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_b, uint2 tid, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = tid; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_tid_locate                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CHANNEL_B * handle)
{ return mco_w_cursor_locate( t, 1, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_tid_find                        ( mco_trans_h t, uint4 id_channel_b, uint2 tid, /*OUT*/ CHANNEL_B *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = tid; 
  return mco_w_tree_find_scalar(t, 1, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_e1_index_cursor                           ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 2, c );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_e1_search                                 ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint2 id_e1 )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_e1_compare                                ( mco_trans_h t, mco_cursor_h c, uint2 id_e1, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_e1_locate                                 ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CHANNEL_B * handle)
{ return mco_w_cursor_locate( t, 2, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_B_by_id_channel_b_hash_find                       ( mco_trans_h t, uint4 id_channel_b, /*OUT*/ CHANNEL_B *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_hash_find_scalar(t, 3, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class CHANNEL_B events                                              */

#define MCO_EVENT_channel_b_tid_update  1
typedef MCO_RET (*mco_channel_b_tid_update_handler)( mco_trans_h t, CHANNEL_B * obj, MCO_EVENT_TYPE et, /*INOUT*/ void *param); 
MCO_TARGET_INLINE MCO_RET  mco_register_channel_b_tid_update_handler                 ( mco_trans_h t, mco_channel_b_tid_update_handler handler, void * param, MCO_HANDLING_ORDER when )
{ return mco_ev_h_register( t, (mco_generic_ev_handler)handler, 0, param, (uint2)(when==MCO_BEFORE_UPDATE) );
}

MCO_TARGET_INLINE MCO_RET  mco_unregister_channel_b_tid_update_handler               ( mco_trans_h t, mco_channel_b_tid_update_handler handler)
{ return mco_ev_h_unregister( t, (mco_generic_ev_handler)handler, 0);
}



/*---------------------------------------------------------------------*/
/* class CHANNEL_D methods                                             */

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_new                                               ( mco_trans_h t, /*OUT*/ CHANNEL_D *handle )
{ return mco_w_new_obj_noid( t, 18, 2, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_delete                                            ( CHANNEL_D *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_checkpoint                                        ( CHANNEL_D *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_id_channel_d_get                                  ( CHANNEL_D *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_id_channel_d_put                                  ( CHANNEL_D *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_id_e1_get                                         ( CHANNEL_D *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get2( (mco_objhandle_h) handle, 18, 16, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_id_e1_put                                         ( CHANNEL_D *handle, uint2 value )
{ return mco_w_b2_put2( (mco_objhandle_h) handle, 18, 16, 1, *(uint2*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_max_call_pointer_get                              ( CHANNEL_D *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_max_call_pointer_put                              ( CHANNEL_D *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 4, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_last_call_pointer_get                             ( CHANNEL_D *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_last_call_pointer_put                             ( CHANNEL_D *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 8, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_size                                ( CHANNEL_D *handle, /*OUT*/ uint2 *result )
{ return mco_w_vector_size_get2( (mco_objhandle_h)handle, 12, 12, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_at                                  ( CHANNEL_D *handle, uint2 index, /*OUT*/ uint1 *result)
{ return mco_w_v_simple_e_get2( (mco_objhandle_h)handle, 12, 12, index, 1, result);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_get_range                           ( CHANNEL_D *handle, uint2 start_index, uint2 num, /*OUT*/ uint1 *dest )
{ return mco_w_v_simple_e_getrange2( (mco_objhandle_h)handle, 12, 12, start_index, 1, num, dest, 0 );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_alloc                               ( CHANNEL_D *handle, uint2 size)
{ return mco_w_v_simple_size_put2( (mco_objhandle_h)handle, 12, 12, size, 1);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_put                                 ( CHANNEL_D *handle, uint2 index, uint1 value )
{ return mco_w_v_simple_e_put2( (mco_objhandle_h)handle, 12, 12, index, 1, 0, & value);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_call_pointers_put_range                           ( CHANNEL_D *handle, uint2 start_index, uint2 num, const uint1 *src )
{ return mco_w_v_simple_e_putrange2( (mco_objhandle_h)handle, 12, 12, start_index, 1, num, 0, src, 0 );
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_from_cursor                                       ( mco_trans_h t, mco_cursor_h c, /*OUT*/ CHANNEL_D *handle )
{ return mco_w_obj_from_cursor( t, c, 2, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_channel_d_index_cursor                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 4, c );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_channel_d_search                            ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_d )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_channel_d_compare                           ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_d, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_channel_d_locate                            ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CHANNEL_D * handle)
{ return mco_w_cursor_locate( t, 4, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_e1_index_cursor                             ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 5, c );
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_e1_search                                   ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint2 id_e1 )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_e1_compare                                  ( mco_trans_h t, mco_cursor_h c, uint2 id_e1, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_id_e1_locate                                   ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CHANNEL_D * handle)
{ return mco_w_cursor_locate( t, 5, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CHANNEL_D_by_channel_d_hash_find                            ( mco_trans_h t, uint4 id_channel_d, /*OUT*/ CHANNEL_D *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; 
  return mco_w_hash_find_scalar(t, 6, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class CH_B_D methods                                                */

MCO_TARGET_INLINE MCO_RET  CH_B_D_new                                              ( mco_trans_h t, /*OUT*/ CH_B_D *handle )
{ return mco_w_new_obj_noid( t, 10, 3, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_delete                                           ( CH_B_D *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_checkpoint                                       ( CH_B_D *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_id_channel_b_get                                 ( CH_B_D *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_id_channel_b_put                                 ( CH_B_D *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 4, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_id_channel_d_get                                 ( CH_B_D *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_id_channel_d_put                                 ( CH_B_D *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_numb_b_get                                       ( CH_B_D *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_numb_b_put                                       ( CH_B_D *handle, uint2 value )
{ return mco_w_b2_put( (mco_objhandle_h) handle, 8, 1, *(uint2*)& value);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_from_cursor                                      ( mco_trans_h t, mco_cursor_h c, /*OUT*/ CH_B_D *handle )
{ return mco_w_obj_from_cursor( t, c, 3, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_index_cursor                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 7, c );
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_search                            ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_d )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_compare                           ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_d, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_locate                            ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CH_B_D * handle)
{ return mco_w_cursor_locate( t, 7, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_index_cursor                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 8, c );
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_search                            ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_b )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_compare                           ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_b, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_locate                            ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CH_B_D * handle)
{ return mco_w_cursor_locate( t, 8, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_numb_b_index_cursor               ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 9, c );
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_numb_b_search                     ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_b, uint2 numb_b )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_numb_b_compare                    ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_b, uint2 numb_b, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_numb_b_locate                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CH_B_D * handle)
{ return mco_w_cursor_locate( t, 9, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_b_numb_b_find                       ( mco_trans_h t, uint4 id_channel_b, uint2 numb_b, /*OUT*/ CH_B_D *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_tree_find_scalar(t, 9, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_numb_b_index_cursor               ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 10, c );
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_numb_b_search                     ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_channel_d, uint2 numb_b )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_numb_b_compare                    ( mco_trans_h t, mco_cursor_h c, uint4 id_channel_d, uint2 numb_b, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_numb_b_locate                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CH_B_D * handle)
{ return mco_w_cursor_locate( t, 10, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  CH_B_D_by_id_chanel_d_numb_b_find                       ( mco_trans_h t, uint4 id_channel_d, uint2 numb_b, /*OUT*/ CH_B_D *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_d; pa_++; 
  pa_->field_type = 2; pa_->v.u2 = numb_b; 
  return mco_w_tree_find_scalar(t, 10, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class CH_B_TRUNK_GR methods                                         */

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_new                                                    ( mco_trans_h t, /*OUT*/ CH_B_TRUNK_GR *handle )
{ return mco_w_new_obj_noid( t, 5, 4, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_delete                                                 ( CH_B_TRUNK_GR *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_checkpoint                                             ( CH_B_TRUNK_GR *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_id_trunk_gr_get                                        ( CH_B_TRUNK_GR *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_id_trunk_gr_put                                        ( CH_B_TRUNK_GR *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 4, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_id_channel_b_get                                       ( CH_B_TRUNK_GR *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_id_channel_b_put                                       ( CH_B_TRUNK_GR *handle, uint4 value )
{ return mco_w_b4_put_ev( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value, 1);
}


MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_from_cursor                                            ( mco_trans_h t, mco_cursor_h c, /*OUT*/ CH_B_TRUNK_GR *handle )
{ return mco_w_obj_from_cursor( t, c, 4, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_by_id_trunk_gr_id_channel_b_index_cursor               ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 11, c );
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_by_id_trunk_gr_id_channel_b_search                     ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_trunk_gr, uint4 id_channel_b )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_trunk_gr; pa_++; 
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_by_id_trunk_gr_id_channel_b_compare                    ( mco_trans_h t, mco_cursor_h c, uint1 id_trunk_gr, uint4 id_channel_b, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_trunk_gr; pa_++; 
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_by_id_trunk_gr_id_channel_b_locate                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c, CH_B_TRUNK_GR * handle)
{ return mco_w_cursor_locate( t, 11, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  CH_B_TRUNK_GR_by_id_channel_b_find                                   ( mco_trans_h t, uint4 id_channel_b, /*OUT*/ CH_B_TRUNK_GR *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_channel_b; 
  return mco_w_hash_find_scalar(t, 12, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class CH_B_TRUNK_GR events                                          */

#define MCO_EVENT_set_id_trunk_gr  2
typedef MCO_RET (*mco_set_id_trunk_gr_handler)( mco_trans_h t, CH_B_TRUNK_GR * obj, MCO_EVENT_TYPE et, /*INOUT*/ void *param); 
MCO_TARGET_INLINE MCO_RET  mco_register_set_id_trunk_gr_handler                                 ( mco_trans_h t, mco_set_id_trunk_gr_handler handler, void * param, MCO_HANDLING_ORDER when )
{ return mco_ev_h_register( t, (mco_generic_ev_handler)handler, 1, param, (uint2)(when==MCO_BEFORE_UPDATE) );
}

MCO_TARGET_INLINE MCO_RET  mco_unregister_set_id_trunk_gr_handler                               ( mco_trans_h t, mco_set_id_trunk_gr_handler handler)
{ return mco_ev_h_unregister( t, (mco_generic_ev_handler)handler, 1);
}



/*---------------------------------------------------------------------*/
/* class DESTINATION methods                                           */

MCO_TARGET_INLINE MCO_RET  DESTINATION_new                                                 ( mco_trans_h t, /*OUT*/ DESTINATION *handle )
{ return mco_w_new_obj_noid( t, 24, 5, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_delete                                              ( DESTINATION *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_checkpoint                                          ( DESTINATION *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  DESTINATION_id_destination_get                                  ( DESTINATION *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_id_destination_put                                  ( DESTINATION *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  DESTINATION_name_get                                            ( DESTINATION *handle, /*OUT*/ char * dest, uint2 dest_size)
{ return mco_w_chars_get( (mco_objhandle_h) handle, 4, dest, dest_size, 20);
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_name_put                                            ( DESTINATION *handle, const char * src, uint2 len) 
{ return mco_w_chars_put( (mco_objhandle_h)handle, 4, src, len, 20, 0);
}


MCO_TARGET_INLINE MCO_RET  DESTINATION_from_cursor                                         ( mco_trans_h t, mco_cursor_h c, /*OUT*/ DESTINATION *handle )
{ return mco_w_obj_from_cursor( t, c, 5, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  DESTINATION_by_id_destination_hash_find                         ( mco_trans_h t, uint4 id_destination, /*OUT*/ DESTINATION *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_hash_find_scalar(t, 13, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  DESTINATION_by_id_destination_index_cursor                      ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 14, c );
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_by_id_destination_search                            ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_destination )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_by_id_destination_compare                           ( mco_trans_h t, mco_cursor_h c, uint4 id_destination, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  DESTINATION_by_id_destination_locate                            ( mco_trans_h t, /*OUT*/ mco_cursor_h c, DESTINATION * handle)
{ return mco_w_cursor_locate( t, 14, (mco_objhandle_h)handle, c);
}


/*---------------------------------------------------------------------*/
/* class DIRECTION methods                                             */

MCO_TARGET_INLINE MCO_RET  DIRECTION_new                                             ( mco_trans_h t, /*OUT*/ DIRECTION *handle )
{ return mco_w_new_obj_noid( t, 26, 6, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_delete                                          ( DIRECTION *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_checkpoint                                      ( DIRECTION *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_id_direction_get                                ( DIRECTION *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_id_direction_put                                ( DIRECTION *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_name_get                                        ( DIRECTION *handle, /*OUT*/ char * dest, uint2 dest_size)
{ return mco_w_chars_get( (mco_objhandle_h) handle, 6, dest, dest_size, 20);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_name_put                                        ( DIRECTION *handle, const char * src, uint2 len) 
{ return mco_w_chars_put( (mco_objhandle_h)handle, 6, src, len, 20, 0);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_to_amts_get                                     ( DIRECTION *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_to_amts_put                                     ( DIRECTION *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 4, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_lpr_get                                         ( DIRECTION *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 5, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_lpr_put                                         ( DIRECTION *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 5, 0, *(uint1*)& value);
}



MCO_TARGET_INLINE MCO_RET  DIRECTION_by_id_direction_hash_find                       ( mco_trans_h t, uint4 id_direction, /*OUT*/ DIRECTION *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; 
  return mco_w_hash_find_scalar(t, 15, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class DIRECTION_DESTINATION methods                                 */

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_new                                                             ( mco_trans_h t, /*OUT*/ DIRECTION_DESTINATION *handle )
{ return mco_w_new_obj_noid( t, 12, 7, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_delete                                                          ( DIRECTION_DESTINATION *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_checkpoint                                                      ( DIRECTION_DESTINATION *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_id_direction_get                                                ( DIRECTION_DESTINATION *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_id_direction_put                                                ( DIRECTION_DESTINATION *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 8, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_id_destination_get                                              ( DIRECTION_DESTINATION *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_id_destination_put                                              ( DIRECTION_DESTINATION *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_points_get                                                      ( DIRECTION_DESTINATION *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_points_put                                                      ( DIRECTION_DESTINATION *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 4, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_from_cursor                                                     ( mco_trans_h t, mco_cursor_h c, /*OUT*/ DIRECTION_DESTINATION *handle )
{ return mco_w_obj_from_cursor( t, c, 7, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_index_cursor                                    ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 16, c );
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_search                                          ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_direction )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_compare                                         ( mco_trans_h t, mco_cursor_h c, uint4 id_direction, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_locate                                          ( mco_trans_h t, /*OUT*/ mco_cursor_h c, DIRECTION_DESTINATION * handle)
{ return mco_w_cursor_locate( t, 16, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_destination_index_cursor                                  ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 17, c );
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_destination_search                                        ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_destination )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_destination_compare                                       ( mco_trans_h t, mco_cursor_h c, uint4 id_destination, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_destination_locate                                        ( mco_trans_h t, /*OUT*/ mco_cursor_h c, DIRECTION_DESTINATION * handle)
{ return mco_w_cursor_locate( t, 17, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_and_id_destination_index_cursor                 ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 18, c );
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_and_id_destination_search                       ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_direction, uint4 id_destination )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; pa_++; 
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_and_id_destination_compare                      ( mco_trans_h t, mco_cursor_h c, uint4 id_direction, uint4 id_destination, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; pa_++; 
  pa_->field_type = 3; pa_->v.u4 = id_destination; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  DIRECTION_DESTINATION_by_id_direction_and_id_destination_locate                       ( mco_trans_h t, /*OUT*/ mco_cursor_h c, DIRECTION_DESTINATION * handle)
{ return mco_w_cursor_locate( t, 18, (mco_objhandle_h)handle, c);
}


/*---------------------------------------------------------------------*/
/* class E1 methods                                                    */

MCO_TARGET_INLINE MCO_RET  E1_new                                     ( mco_trans_h t, /*OUT*/ E1 *handle )
{ return mco_w_new_obj_noid( t, 14, 8, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  E1_delete                                  ( E1 *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  E1_checkpoint                              ( E1 *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  E1_id_e1_get                               ( E1 *handle, /*OUT*/ uint2 * result)
{ return mco_w_b2_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  E1_id_e1_put                               ( E1 *handle, uint2 value )
{ return mco_w_b2_put( (mco_objhandle_h) handle, 0, 1, *(uint2*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_id_ie1_get                              ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 13, result);
}

MCO_TARGET_INLINE MCO_RET  E1_id_ie1_put                              ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 13, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_number_get                              ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 2, result);
}

MCO_TARGET_INLINE MCO_RET  E1_number_put                              ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 2, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_ss7_get                                 ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 7, result);
}

MCO_TARGET_INLINE MCO_RET  E1_ss7_put                                 ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 7, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_hdb3_get                                ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  E1_hdb3_put                                ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 4, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_avrscs_get                              ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 5, result);
}

MCO_TARGET_INLINE MCO_RET  E1_avrscs_put                              ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 5, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_avrcs_get                               ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 6, result);
}

MCO_TARGET_INLINE MCO_RET  E1_avrcs_put                               ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 6, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_sia_get                                 ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 3, result);
}

MCO_TARGET_INLINE MCO_RET  E1_sia_put                                 ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 3, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_sia16_get                               ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  E1_sia16_put                               ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 8, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_avrre_get                               ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 9, result);
}

MCO_TARGET_INLINE MCO_RET  E1_avrre_put                               ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 9, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_offscsre_get                            ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 10, result);
}

MCO_TARGET_INLINE MCO_RET  E1_offscsre_put                            ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 10, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_hierror_get                             ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 11, result);
}

MCO_TARGET_INLINE MCO_RET  E1_hierror_put                             ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 11, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_slip_get                                ( E1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 12, result);
}

MCO_TARGET_INLINE MCO_RET  E1_slip_put                                ( E1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 12, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  E1_from_cursor                             ( mco_trans_h t, mco_cursor_h c, /*OUT*/ E1 *handle )
{ return mco_w_obj_from_cursor( t, c, 8, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_number_index_cursor           ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 19, c );
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_number_search                 ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_ie1, uint1 number )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_number_compare                ( mco_trans_h t, mco_cursor_h c, uint1 id_ie1, uint1 number, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_number_locate                 ( mco_trans_h t, /*OUT*/ mco_cursor_h c, E1 * handle)
{ return mco_w_cursor_locate( t, 19, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_number_find                   ( mco_trans_h t, uint1 id_ie1, uint1 number, /*OUT*/ E1 *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find_scalar(t, 19, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  E1_by_number_index_cursor                  ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 20, c );
}

MCO_TARGET_INLINE MCO_RET  E1_by_number_search                        ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 number )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_number_compare                       ( mco_trans_h t, mco_cursor_h c, uint1 number, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_number_locate                        ( mco_trans_h t, /*OUT*/ mco_cursor_h c, E1 * handle)
{ return mco_w_cursor_locate( t, 20, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_index_cursor                  ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 21, c );
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_search                        ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_ie1 )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_compare                       ( mco_trans_h t, mco_cursor_h c, uint1 id_ie1, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  E1_by_id_ie1_locate                        ( mco_trans_h t, /*OUT*/ mco_cursor_h c, E1 * handle)
{ return mco_w_cursor_locate( t, 21, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  E1_by_id_e1_find                           ( mco_trans_h t, uint2 id_e1, /*OUT*/ E1 *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 2; pa_->v.u2 = id_e1; 
  return mco_w_hash_find_scalar(t, 22, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class IE1 methods                                                   */

MCO_TARGET_INLINE MCO_RET  IE1_new                                        ( mco_trans_h t, /*OUT*/ IE1 *handle )
{ return mco_w_new_obj_noid( t, 9, 9, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  IE1_delete                                     ( IE1 *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  IE1_checkpoint                                 ( IE1 *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  IE1_id_ie1_get                                 ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_id_ie1_put                                 ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 8, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_id_upo_get                                 ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_id_upo_put                                 ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 0, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_number_get                                 ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 1, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_number_put                                 ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 1, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_exist_get                                  ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 2, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_exist_put                                  ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 2, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_ram_get                                    ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 3, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_ram_put                                    ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 3, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_dsp_fifo_get                               ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_dsp_fifo_put                               ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 4, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_cmatr_get                                  ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 5, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_cmatr_put                                  ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 5, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_altera_get                                 ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 6, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_altera_put                                 ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 6, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_liu_framers_get                            ( IE1 *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 7, result);
}

MCO_TARGET_INLINE MCO_RET  IE1_liu_framers_put                            ( IE1 *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 7, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  IE1_from_cursor                                ( mco_trans_h t, mco_cursor_h c, /*OUT*/ IE1 *handle )
{ return mco_w_obj_from_cursor( t, c, 9, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_number_index_cursor              ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 23, c );
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_number_search                    ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_upo, uint1 number )
{ mco_external_field_t a_ [2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_number_compare                   ( mco_trans_h t, mco_cursor_h c, uint1 id_upo, uint1 number, /*OUT*/ int *result_ )
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_number_locate                    ( mco_trans_h t, /*OUT*/ mco_cursor_h c, IE1 * handle)
{ return mco_w_cursor_locate( t, 23, (mco_objhandle_h)handle, c);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_number_find                      ( mco_trans_h t, uint1 id_upo, uint1 number, /*OUT*/ IE1 *handle_)
{ mco_external_field_t a_[2];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; pa_++; 
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find_scalar(t, 23, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  IE1_by_number_index_cursor                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 24, c );
}

MCO_TARGET_INLINE MCO_RET  IE1_by_number_search                           ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 number )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_number_compare                          ( mco_trans_h t, mco_cursor_h c, uint1 number, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_number_locate                           ( mco_trans_h t, /*OUT*/ mco_cursor_h c, IE1 * handle)
{ return mco_w_cursor_locate( t, 24, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_index_cursor                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 25, c );
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_search                           ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_upo )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_compare                          ( mco_trans_h t, mco_cursor_h c, uint1 id_upo, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  IE1_by_id_upo_locate                           ( mco_trans_h t, /*OUT*/ mco_cursor_h c, IE1 * handle)
{ return mco_w_cursor_locate( t, 25, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  IE1_by_id_ie1_find                             ( mco_trans_h t, uint1 id_ie1, /*OUT*/ IE1 *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_ie1; 
  return mco_w_hash_find_scalar(t, 26, a_, (mco_objhandle_h)handle_);
}


/*---------------------------------------------------------------------*/
/* class TRUNK_GROUP methods                                           */

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_new                                                          ( mco_trans_h t, /*OUT*/ TRUNK_GROUP *handle )
{ return mco_w_new_obj_noid( t, 53, 10, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_delete                                                       ( TRUNK_GROUP *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_checkpoint                                                   ( TRUNK_GROUP *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_trunk_group_get                                           ( TRUNK_GROUP *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 52, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_trunk_group_put                                           ( TRUNK_GROUP *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 52, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_direction_get                                             ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 8, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_direction_put                                             ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 8, 1, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_inout_get                                                    ( TRUNK_GROUP *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 49, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_inout_put                                                    ( TRUNK_GROUP *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 49, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_slzsl_get                                                    ( TRUNK_GROUP *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 51, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_slzsl_put                                                    ( TRUNK_GROUP *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 51, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_isdn_get                                                     ( TRUNK_GROUP *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 50, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_isdn_put                                                     ( TRUNK_GROUP *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 50, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_overuse_get                                                  ( TRUNK_GROUP *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 48, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_overuse_put                                                  ( TRUNK_GROUP *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 48, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_region_set_get                                            ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 20, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_region_set_put                                            ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 20, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_extern_set_get                                            ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 24, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_id_extern_set_put                                            ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 24, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_cng_hi_limit_get                                             ( TRUNK_GROUP *handle, /*OUT*/ double * result)
{ return mco_w_b8_get( (mco_objhandle_h) handle, 28, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_cng_hi_limit_put                                             ( TRUNK_GROUP *handle, double value )
{ return mco_w_b8_put( (mco_objhandle_h) handle, 28, 0, & value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_cng_low_limit_get                                            ( TRUNK_GROUP *handle, /*OUT*/ double * result)
{ return mco_w_b8_get( (mco_objhandle_h) handle, 36, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_cng_low_limit_put                                            ( TRUNK_GROUP *handle, double value )
{ return mco_w_b8_put( (mco_objhandle_h) handle, 36, 0, & value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_b_total_get                                                  ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 44, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_b_total_put                                                  ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 44, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_b_used_get                                                   ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 4, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_b_used_put                                                   ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 4, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_last_occupied_channel_b_get                                  ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 16, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_last_occupied_channel_b_put                                  ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 16, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_max_channel_b_id_get                                         ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_max_channel_b_id_put                                         ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 0, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_first_channel_b_id_get                                       ( TRUNK_GROUP *handle, /*OUT*/ uint4 * result)
{ return mco_w_b4_get( (mco_objhandle_h) handle, 12, result);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_first_channel_b_id_put                                       ( TRUNK_GROUP *handle, uint4 value )
{ return mco_w_b4_put( (mco_objhandle_h) handle, 12, 0, *(uint4*)& value);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_from_cursor                                                  ( mco_trans_h t, mco_cursor_h c, /*OUT*/ TRUNK_GROUP *handle )
{ return mco_w_obj_from_cursor( t, c, 10, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_id_trunk_group_hash_find                                  ( mco_trans_h t, uint1 id_trunk_group, /*OUT*/ TRUNK_GROUP *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_trunk_group; 
  return mco_w_hash_find_scalar(t, 27, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_id_trunk_group_index_cursor                               ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 28, c );
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_id_trunk_group_search                                     ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_trunk_group )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_trunk_group; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_id_trunk_group_compare                                    ( mco_trans_h t, mco_cursor_h c, uint1 id_trunk_group, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_trunk_group; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_id_trunk_group_locate                                     ( mco_trans_h t, /*OUT*/ mco_cursor_h c, TRUNK_GROUP * handle)
{ return mco_w_cursor_locate( t, 28, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_direction_index_cursor                                    ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 29, c );
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_direction_search                                          ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint4 id_direction )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_direction_compare                                         ( mco_trans_h t, mco_cursor_h c, uint4 id_direction, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 3; pa_->v.u4 = id_direction; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  TRUNK_GROUP_by_direction_locate                                          ( mco_trans_h t, /*OUT*/ mco_cursor_h c, TRUNK_GROUP * handle)
{ return mco_w_cursor_locate( t, 29, (mco_objhandle_h)handle, c);
}


/*---------------------------------------------------------------------*/
/* class UPO methods                                                   */

MCO_TARGET_INLINE MCO_RET  UPO_new                                 ( mco_trans_h t, /*OUT*/ UPO *handle )
{ return mco_w_new_obj_noid( t, 3, 11, (mco_objhandle_h)handle);
}

MCO_TARGET_INLINE MCO_RET  UPO_delete                              ( UPO *handle )
{ return mco_w_obj_delete( (mco_objhandle_h)handle); 
}

MCO_TARGET_INLINE MCO_RET  UPO_checkpoint                          ( UPO *handle )
{ return mco_w_obj_checkpoint( (mco_objhandle_h)handle );
}


MCO_TARGET_INLINE MCO_RET  UPO_id_upo_get                          ( UPO *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 2, result);
}

MCO_TARGET_INLINE MCO_RET  UPO_id_upo_put                          ( UPO *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 2, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  UPO_number_get                          ( UPO *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 0, result);
}

MCO_TARGET_INLINE MCO_RET  UPO_number_put                          ( UPO *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 0, 1, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  UPO_exist_get                           ( UPO *handle, /*OUT*/ uint1 * result)
{ return mco_w_b1_get( (mco_objhandle_h) handle, 1, result);
}

MCO_TARGET_INLINE MCO_RET  UPO_exist_put                           ( UPO *handle, uint1 value )
{ return mco_w_b1_put( (mco_objhandle_h) handle, 1, 0, *(uint1*)& value);
}


MCO_TARGET_INLINE MCO_RET  UPO_from_cursor                         ( mco_trans_h t, mco_cursor_h c, /*OUT*/ UPO *handle )
{ return mco_w_obj_from_cursor( t, c, 11, (mco_objhandle_h)handle ); 
}


MCO_TARGET_INLINE MCO_RET  UPO_by_id_upo_index_cursor              ( mco_trans_h t, /*OUT*/ mco_cursor_h c )
{ return mco_w_index_cursor( t, 30, c );
}

MCO_TARGET_INLINE MCO_RET  UPO_by_id_upo_search                    ( mco_trans_h t, /*INOUT*/ mco_cursor_h c, MCO_OPCODE op_, uint1 id_upo )
{ mco_external_field_t a_ [1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; 
  return mco_w_tree_find(t,c,op_,a_);
}

MCO_TARGET_INLINE MCO_RET  UPO_by_id_upo_compare                   ( mco_trans_h t, mco_cursor_h c, uint1 id_upo, /*OUT*/ int *result_ )
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; 
  return mco_w_cursor_compare( t, c, a_, result_);
}

MCO_TARGET_INLINE MCO_RET  UPO_by_id_upo_locate                    ( mco_trans_h t, /*OUT*/ mco_cursor_h c, UPO * handle)
{ return mco_w_cursor_locate( t, 30, (mco_objhandle_h)handle, c);
}


MCO_TARGET_INLINE MCO_RET  UPO_by_number_hash_find                 ( mco_trans_h t, uint1 number, /*OUT*/ UPO *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = number; 
  return mco_w_hash_find_scalar(t, 31, a_, (mco_objhandle_h)handle_);
}


MCO_TARGET_INLINE MCO_RET  UPO_by_id_upo_hash_find                 ( mco_trans_h t, uint1 id_upo, /*OUT*/ UPO *handle_)
{ mco_external_field_t a_[1];
  mco_external_field_h pa_ = a_;
  pa_->field_type = 1; pa_->v.u1 = id_upo; 
  return mco_w_hash_find_scalar(t, 32, a_, (mco_objhandle_h)handle_);
}


#ifdef __cplusplus
} // extern "C" 
#endif

#endif
