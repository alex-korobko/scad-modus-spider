#include "global.h"

byte g_CRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
};

byte g_CRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
};


void system_settings::sys_message(const int type, const string mess_text)
{
string buffer;
buffer.reserve(mess_text.size()+12);

	switch(type)
	{
		case system_settings::ERROR_MSG:
			buffer="ERROR: ";
			buffer+=mess_text;
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_ERROR, buffer.c_str(), NULL);
			break;
		case system_settings::INFO_MSG:
			buffer="INFO: ";
			buffer+=mess_text;
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_INFO, buffer.c_str(), NULL);
      		break;
		case system_settings::DEBUG_MSG:
			buffer="DEBUG: ";
			buffer+=mess_text;			
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_DEBUG1, buffer.c_str(), NULL);
      		break;
      	default:
			buffer="UNDEFINED: ";
			buffer+=mess_text;
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_ERROR, buffer.c_str(), NULL);
			break;

	}
}

void system_settings::message_window (int type, string mess_text)
{
PhImage_t *window_icon;
string window_title;

	switch(type)
	{
		case system_settings::ERROR_MSG:
			window_icon=ApGetImageRes(widget_dbase, "stopMsg");
			window_title="Ошибка !";
			
			break;
		case system_settings::INFO_MSG:
			window_icon=ApGetImageRes(widget_dbase, "infoMsg");
			window_title="Информация";
			
      		break;
		case system_settings::WARN_MSG:
			window_icon=ApGetImageRes(widget_dbase, "warnMsg");
			window_title="Внимание !";

      		break;
      	default:
 			window_icon=ApGetImageRes(widget_dbase, "stopMsg");
			window_title="Важное сообщение";
			
			break;

	};

	if (!font_for_messages_small.empty() || !font_for_messages_large.empty() )
	{
	PtNotice(main_window, 
					NULL, 
					window_title.c_str(),
					window_icon, 
					mess_text.c_str(), 
					(const char*) &font_for_messages_small[0], 
					"Ok", 
					(const char*) &font_for_messages_large[0],
					Pt_MODAL | Pt_CENTER);
	} else {
			string mess ="ERROR: Can`t found small or large font for message window";
			vslogf(_SLOG_SETCODE(_SLOGC_SPIDER, 0), _SLOG_ERROR, mess.c_str(), NULL);

		PtNotice(main_window, 
					NULL, 
					window_title.c_str(),
					window_icon, 
					mess_text.c_str(), 
					NULL, 
					"Ok", 
					NULL,
					Pt_MODAL | Pt_CENTER);

	}; 
};

word system_settings::crc(vector<byte> buffer)
{
	byte highCRC = 0xFF;
	byte lowCRC = 0xFF;
	word	index;
	
	if ( buffer.empty()) return(0);
	
	for (vector<byte>::iterator iter= buffer.begin();
			iter!= buffer.end();
			iter++)
	{
		index = highCRC ^ *iter;
		highCRC = lowCRC ^ g_CRCHi[index];
		lowCRC = g_CRCLo[index];
	}

	return (highCRC << 8 | lowCRC);
};

int system_settings::save_directions(const string file_name)
{
/*
	FILE*		handle;
	dword	id;
	int			direction;	

	handle = fopen(file_name.c_str(), "wb");

	if (!handle)
		return 0;
	
	if (g_escalators.empty())
		return 0;
			
	fwrite(&g_escalators.size(), sizeof(g_escalators.size()), 1,  handle);
	
	for(int i=0; i<g_escalatorNum; i++)
	{
		fwrite(&dword(i), sizeof(i), 1,  handle);
		direction = g_escalators[i].prefDirection;
		fwrite(&direction, sizeof(direction), 1, handle);
	}
	
	fclose(handle);
*/	
	return 1;
};

int system_settings::load_directions( const string file_name)
{
/*
	FILE*		handle;
	int			id, count = -1;
	int			direction;	
	size_t	size;
	
	handle = fopen(fileName, "rb");
	if (!handle)
		return 0;
		
	size = fread(&count, sizeof(count), 1,  handle);
	
	if (!size || (count != g_escalatorNum))
		return 0;	
	
	for(int i=0; i<count; i++)
	{
		size = fread(&id, sizeof(id), 1,  handle);
		
		if (!size)
			return 0;

		size = fread(&direction, sizeof(direction), 1, handle);
			
		if (!size)
			return 0;
		g_escalators[i].SetParam(DIR_PARAM, direction);
	}
	
	fclose(handle);
*/	
	return 1;
};

